# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#

trigger:
  branches:
    include:
    - main
    - releases/*
pr:
  - main
  - releases/*

pool:
  vmImage: 'ubuntu-latest'

resources:
  containers:
    - container: 'ubuntu18.04-gcc11-conan2-doxygen1.9.6'
      image: 'mattgomes28/cpp-ubuntu-bionic:0.7'
      options: '--user 0:0'

stages:

- stage: failfast
  displayName: FailFast Checks
  jobs:
  - job: failfast
    displayName: Failfast Scripts
    container: 'ubuntu18.04-gcc11-conan2-doxygen1.9.6'
    continueOnError: false
    steps:
    - bash: scripts/shellcheck.sh
      displayName: Linting Shell
      workingDirectory: $(Build.SourcesDirectory)
    - bash: scripts/cpp-lint.sh
      displayName: Linting CPP files
      workingDirectory: $(Build.SourcesDirectory)

- stage: 'build'
  displayName: 'Build Project'
  dependsOn:
    - failfast

  jobs:
  - template: scripts/pipeline/ubuntu_build.yml
    parameters:
      jobName: ubuntu_build_x86_64_debug
      buildType: Debug
      cmakePreset: unix-deb
      cmakeExtraArgs: -DBUILD_DOCS="On"
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6

  - template: scripts/pipeline/ubuntu_build.yml
    parameters:
      jobName: ubuntu_build_x86_64_release
      buildType: Release
      cmakePreset: unix-rel
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6

  - template: scripts/pipeline/windows_build.yml
    parameters:
      jobName: windows_build_x64_debug
      buildType: Debug
      cmakePreset: vs2022-deb

  - template: scripts/pipeline/windows_build.yml
    parameters:
      jobName: windows_build_x64_release
      buildType: Release
      cmakePreset: vs2022-rel

- stage: docs
  displayName: Build Documentation
  dependsOn:
    - build
  jobs:
  - job:
    container: ubuntu18.04-gcc11-conan2-doxygen1.9.6
    displayName: Build Doxygen CMake
    steps:
      - checkout: self
        submodules: recursive
      - bash: scripts/helpers/conan-install.sh
        displayName: 'Installing all Conan dependencies'
        workingDirectory: $(Build.SourcesDirectory)

      - task: DownloadPipelineArtifact@2
        displayName: Download Built Files
        inputs:
          source: current
          artifact: UbuntuDebugBuild
          path: "$(Build.SourcesDirectory)/artifacts"

      - bash: |
          set -euo pipefail
          tar -xzf "artifacts/ubuntu-x86-64-Debug.tar.gz"
          cd "build/unix-deb" && cmake --build . --target=doxygen_build
          mkdir -p "$(Build.SourcesDirectory)/artifacts"
          tar -zcf "$(Build.SourcesDirectory)/artifacts/docs.tar.gz" "docs" 
        displayName: 'Building The Doxygen Target'
        workingDirectory: $(Build.SourcesDirectory)
      
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: "$(Build.SourcesDirectory)/artifacts"
          artifactName: 'DocsFiles'

- stage: tests
  displayName: Running Tests
  dependsOn:
    - build
  jobs:
  - job:
    container: ubuntu18.04-gcc11-conan2-doxygen1.9.6
    displayName: Running CTest
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        displayName: Download Built Files
        inputs:
          source: current
          artifact: UbuntuDebugBuild
          path: "$(Build.SourcesDirectory)/artifacts"

      - bash: |
          set -euo pipefail
          tar -xzf "artifacts/ubuntu-x86-64-Debug.tar.gz"
          cd "build/unix-deb" && ctest --verbose --test-dir="build/unix-deb"
        displayName: Running All Tests
        workingDirectory: $(Build.SourcesDirectory)

- stage: static_analysis
  displayName: Static Analysis
  dependsOn:
    - build
  jobs:
  - job:
    container: ubuntu18.04-gcc11-conan2-doxygen1.9.6
    displayName: Running Clang-Tidy
    steps:
      - checkout: self
      - task: DownloadPipelineArtifact@2
        displayName: Download Built Files
        inputs:
          source: current
          artifact: UbuntuDebugBuild
          path: $(Build.SourcesDirectory)/artifacts
      - bash: scripts/helpers/conan-install.sh
        displayName: Installing all Conan dependencies
        workingDirectory: $(Build.SourcesDirectory)
      - bash: |
          set -euo pipefail
          tar -xzf "artifacts/ubuntu-x86-64-Debug.tar.gz"
          ./scripts/static-analysis.sh
        displayName: Running Clang-Tidy script
        workingDirectory: $(Build.SourcesDirectory)
