# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#

pool:
  vmImage: 'ubuntu-latest'

resources:
  containers:
    - container: 'ubuntu18.04-gcc11-conan2-doxygen1.9.6'
      image: 'mattgomes28/cpp-ubuntu-bionic:0.3'
      options: '--user 0:0'

stages:

- stage: 'build'
  displayName: 'Build Project'
  jobs:
  - job: 'build_x86_64'  
    container: 'ubuntu18.04-gcc11-conan2-doxygen1.9.6'
    continueOnError: 'false'
    steps:
      - bash: scripts/helpers/conan-install.sh
        displayName: 'Installing all Conan dependencies'
        workingDirectory: $(Build.SourcesDirectory)

      - bash: |
          set -euo pipefail
          scripts/build_x86-64.sh
          mkdir -p "$(Build.SourcesDirectory)/artifacts"
          tar -zcf "$(Build.SourcesDirectory)/artifacts/build-x86_64.tar.gz" "build/" 
        displayName: 'Compile Code & Tests'
        workingDirectory: $(Build.SourcesDirectory)

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: "$(Build.SourcesDirectory)/artifacts"
          artifactName: 'BuildFiles'

  - job: 'build_win_x64'  
    pool:
      vmImage: 'windows-2022'
    continueOnError: 'false'
    steps:
      - pwsh: .\scripts\helpers\conan-install.ps1 -BuildType Debug
        displayName: 'Installing all Conan dependencies'
        workingDirectory: $(Build.SourcesDirectory)

      - pwsh: |
          .\scripts\build_win_x64.ps1
          if(!$?) { Exit $LASTEXITCODE }
          New-Item -ItemType Directory -Force -Path "$(Build.SourcesDirectory)/artifacts"
          7z a -ttar "$(Build.SourcesDirectory)/artifacts/build_win_64.tar"  "build/"
          if(!$?) { Exit $LASTEXITCODE }
          7z a -tgzip "$(Build.SourcesDirectory)/artifacts/build_win_64.tar.gz" "$(Build.SourcesDirectory)/artifacts/build_win_64.tar"
          if(!$?) { Exit $LASTEXITCODE }
        displayName: 'Compile Code & Tests'
        workingDirectory: $(Build.SourcesDirectory)
        failOnStderr: true

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: "$(Build.SourcesDirectory)/artifacts"
          artifactName: 'WinBuildFiles'

- stage: 'docs'
  displayName: 'Build Documentation'
  jobs:
  - job:
    container: 'ubuntu18.04-gcc11-conan2-doxygen1.9.6'
    steps:
      - checkout: self
        submodules: recursive
      - bash: scripts/helpers/conan-install.sh
        displayName: 'Installing all Conan dependencies'
        workingDirectory: $(Build.SourcesDirectory)

      - task: DownloadPipelineArtifact@2
        displayName: 'Download Built Files'
        inputs:
          source: current
          artifact: 'BuildFiles'
          path: "$(Build.SourcesDirectory)/artifacts"

      - bash: |
          set -euo pipefail
          tar -xzf "artifacts/build-x86_64.tar.gz"
          cd "build/unix-deb" && cmake --build . --target=doxygen_build
          mkdir -p "$(Build.SourcesDirectory)/artifacts"
          tar -zcf "$(Build.SourcesDirectory)/artifacts/docs.tar.gz" "docs" 
        displayName: 'Building The Doxygen Target'
        workingDirectory: $(Build.SourcesDirectory)
      
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: "$(Build.SourcesDirectory)/artifacts"
          artifactName: 'DocsFiles'

- stage: 'tests'
  displayName: 'Running Tests'
  jobs:
  - job:
    container: 'ubuntu18.04-gcc11-conan2-doxygen1.9.6'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Built Files'
        inputs:
          source: current
          artifact: 'BuildFiles'
          path: "$(Build.SourcesDirectory)/artifacts"

      - bash: |
          set -euo pipefail
          tar -xzf "artifacts/build-x86_64.tar.gz"
          cd "build/unix-deb" && ctest --verbose --test-dir="build/unix-deb"
        displayName: 'Running All Tests'
        workingDirectory: $(Build.SourcesDirectory)
